mutate(
in_rhomis = ipums_df$GEOID_country %in% rhomis_df$GEOID_country,
) %>%
group_by(iso_2) %>%
# Get the country summary of number of areas, and nuber of rhomis areas
summarise(
number_of_GEO2=dplyr::n(),
GEO2_with_rhomis=sum(in_rhomis==T)
) %>%
# Calculate the percentage of areas covered
mutate(
coverage = 100*GEO2_with_rhomis/number_of_GEO2,
)
areas_in_rhomis <- areas_in_rhomis %>% left_join(region_table, by="iso_2")
ggplot(areas_in_rhomis, aes(x=iso_2, y=coverage, fill=region_afr))+
geom_bar(stat="identity")+
labs(title="Percentage of GEO2 Areas Containing RHoMIS Surveys",
x ="ISO Country Code", y = "Percentage of Areas with RHoMIS Surveys")
# knitr::kable(areas_in_rhomis)
# stats_per_area <- rhomis_df %>%
#   group_by(iso_2, GEO2LABEL) %>%
#   summarise(
#     households_per_area=dplyr::n()
#   ) %>%
#   group_by(iso_2) %>%
#   summarise(
#     hh_per_geo2_mean=mean(households_per_area),
#     hh_per_geo2_lq=quantile(households_per_area, 0.25, na.rm=T),
#     hh_per_geo2_median=quantile(households_per_area, 0.5, na.rm=T),
#     hh_per_geo2_uq=quantile(households_per_area, 0.75, na.rm=T),
#     hh_per_geo2_iqr=IQR(households_per_area, 0.75, na.rm=T),
#
#     hh_per_geo2_sd=sd(households_per_area)
#
#   )
stats_per_area <- rhomis_df %>%
filter(!is.na(iso_2))%>%
group_by(iso_2, GEO2LABEL) %>%
summarise(
households_per_area=dplyr::n()
)
stats_per_area <- stats_per_area %>% left_join(region_table, by="iso_2")
ggplot(stats_per_area, aes(x=iso_2, y=households_per_area, fill=region_afr))+
geom_boxplot()+
labs(title="Number of RHoMIS Surveys in GEO2 Households",
x ="ISO Country Code", y = "Number of Households in Area")
# Chunk 6: land_size_1
land_size_df <- rhomis_df %>%
filter(!is.na(iso_2))
ggplot(land_size_df, aes(x=iso_2, y=land_cultivated_ha, fill=region_afr))+
geom_boxplot()+
scale_y_continuous(limits = quantile(rhomis_df$land_cultivated_ha, c(0, 0.95), na.rm = T))+
labs(title="Land Cultivated (ha) per Country",
x ="ISO Country Code", y = "Land Cultivated (ha)")
# Chunk 7: land_size_2
rhomis_no_na <- rhomis_df %>%
filter(!is.na(iso_2)) %>%
filter(!is.na(land_cultivated_ha))
bin_number <- 10
land_quartiles <- quantile(rhomis_df$land_cultivated_ha, seq(0,1,1/bin_number), na.rm=T)
x_gt_cond <- land_quartiles[1:(length(land_quartiles)-1)]
x_ls_cond <- land_quartiles[2:length(land_quartiles)]
x_quarts <- paste0("q",c(1:bin_number))
cases <- paste0('land_cultivated_ha >= ', x_gt_cond, ' & land_cultivated_ha < ', x_ls_cond, ' ~ "', x_quarts, '"')
rhomis_no_na <- rhomis_df %>% mutate(land_quantiles = dplyr::case_when(!!!rlang::parse_exprs(cases)))
rhomis_no_na$land_quantiles <- factor(rhomis_no_na$land_quantiles, levels=x_quarts, ordered=T)
ggplot(rhomis_no_na, aes(x=land_quantiles, y=total_income_ppp_per_year)) +
geom_boxplot()+
scale_y_continuous(limits = quantile(rhomis_no_na$total_income_ppp_per_year, c(0, 0.8), na.rm = T))
# Chunk 8: land_size_3
pca_data <- ipums_df[
c(
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
)
]
pca_data
res.pca <- FactoMineR::PCA(pca_data)
fviz_screeplot(res.pca, ncp=10)
pca_data <- ipums_df[
c(
unlist(variable_categories$ipums$economic_subnational_indicators),
# unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
)
]
res.pca <- FactoMineR::PCA(pca_data)
pca_data <- ipums_df[
c(
unlist(variable_categories$ipums$economic_subnational_indicators),
# unlist(variable_categories$ipums$population_columns_percentage),
# unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
)
]
res.pca <- FactoMineR::PCA(pca_data)
pca_data <- ipums_df[
c(
unlist(variable_categories$ipums$economic_subnational_indicators),
# unlist(variable_categories$ipums$population_columns_percentage),
# unlist(variable_categories$ipums$employment_columns),
# unlist(variable_categories$ipums$landscape_variables)
)
]
res.pca <- FactoMineR::PCA(pca_data)
fviz_screeplot(res.pca, ncp=10)
variable_categories$ipums$economic_subnational_indicators
pca_data
pca_data <- ipums_df[
c(
unlist(variable_categories$ipums$economic_subnational_indicators)
# unlist(variable_categories$ipums$population_columns_percentage),
# unlist(variable_categories$ipums$employment_columns),
# unlist(variable_categories$ipums$landscape_variables)
)
]
res.pca <- FactoMineR::PCA(pca_data)
fviz_screeplot(res.pca, ncp=10)
res.pca
summary(my_gam)
fviz_pca_var(res.pca)
chart.Correlation(pca_data, histogram=TRUE, pch=19)
pca_data <- ipums_df[
c(
# unlist(variable_categories$ipums$economic_subnational_indicators)
# unlist(variable_categories$ipums$population_columns_percentage),
# unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
)
]
chart.Correlation(pca_data, histogram=TRUE, pch=19)
res.pca <- FactoMineR::PCA(pca_data)
pca_data <- ipums_df[
c(
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
)
]
res.pca <- FactoMineR::PCA(pca_data)
fviz_screeplot(res.pca, ncp=10)
fviz_screeplot(res.pca, ncp=20)
res.pca
res.pca$var
fviz_screeplot
res.pca$eig
fviz_screeplot
?fviz_screeplot
fviz_screeplot(res.pca, ncp=20, aes_string(y="cumulative percentage of variance"))
ggplot(res.pca$eig, aes_string(y="cumulative percentage of variance"))
ggplot(res.pca$eig, aes_string(y=c("cumulative percentage of variance")))
ggplot(res.pca$eig, aes_string(y=c("cumulative")))
ggplot(res.pca$eig, aes_string(y=c("cumulative percentage")))
res.pca$eig
ggplot(res.pca$eig, aes_string(y=`cumulative percentage of variance`))
dep_vars <- paste0(c(
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
), collapse=")+(")
dep_vars
dep_vars <- paste0(c(
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
), collapse=") + (")
dep_vars
dep_vars <- paste0(c(
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
), collapse=") + s(")
dep_vars
dep_vars <- paste0("s(",dep_vars ")")
dep_vars <- paste0(c(
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
), collapse=") + s(")
dep_vars <- paste0("s(",dep_vars ")")
dep_vars <- paste0(c(
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
), collapse=") + s(")
dep_vars <- paste0("s(",dep_vars,")")
dep_vars
pca_data <- ipums_df[
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
]
res.pca <- FactoMineR::PCA(pca_data)
res.pca$eig
ggplot(res.pca$eig, aes_string(y=`cumulative percentage of variance`))
fviz_screeplot(res.pca, ncp=20)
?FactoMineR::PCA
res.pca <- FactoMineR::PCA(pca_data, ncp20)
res.pca <- FactoMineR::PCA(pca_data, ncp=20)
res.pca$eig
fviz_screeplot(res.pca, ncp=20)
?FactoMineR::PCA
dep_vars <- paste0(c(
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
), collapse=") + s(")
dep_vars <- paste0("s(",dep_vars,")")
dep_vars
y <- "land_ultivated_ha"
sep <- "~"
dep_vars <- paste0(c(
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
), collapse=") + s(")
dep_vars <- paste0("s(",dep_vars,")")
formula <- as.formula(paste0(y, sep, dep_vars, collapse = " "))
formula
y <- "land_cultivated_ha"
sep <- "~"
dep_vars <- paste0(c(
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
), collapse=") + s(")
dep_vars <- paste0("s(",dep_vars,")")
formula <- as.formula(paste0(y, sep, dep_vars, collapse = " "))
my_gam <- mgcv::gam(
data=rhomis_df,
formula = my_gam,
method="REML")
my_gam <- mgcv::gam(
data=rhomis_df,
formula = formula,
method="REML")
rhomis_df[population_columns_percentage] <- 100*rhomis_df[unlist(variable_categories$ipums$population_columns)]/rhomis_df$TOTPOP_GEO2A
dep_vars <- paste0(c(
unlist(variable_categories$ipums$economic_subnational_indicators),
unlist(variable_categories$ipums$population_columns_percentage),
unlist(variable_categories$ipums$employment_columns),
unlist(variable_categories$ipums$landscape_variables)
), collapse=") + s(")
dep_vars <- paste0("s(",dep_vars,")")
formula <- as.formula(paste0(y, sep, dep_vars, collapse = " "))
my_gam <- mgcv::gam(
data=rhomis_df,
formula = formula,
method="REML")
# Chunk 1: setup
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Data Processing Packages
library(jsonlite)
library(readr)
library(dplyr)
library(tibble)
library(rlang)
# Spatial Packages
library(sf)
library(sp)
library(stars)
# Plotting Packages
library(corrplot)
library(ggplot2)
library(ggridges)
library(ggExtra)
library(leaflet)
library(mapview)
# Statistical Analysis Pakcages
library(FactoMineR) # Package for dimensionality reduction
library(factoextra) # Package for dimensionality reduction
library(brms) # Bayesian analysis package
library(rstan) # R package for writing stan models
library(lme4) # Linear, generalised linear, and nonlinear mixed models
library(mgcv) # Package for GAMs
library(lqmm) # Linear Quatile Mixed Models (Hierarchical Quantile)
library(quantreg) # Quantile Regression
library(bamlss) # Bayesian Additive Models for Location Scale and Shape
library(moments) # Package for skewness
library(sn) # Function for generating data from a skew normal distribution
library(PerformanceAnalytics) # Library for plotting density and correlations
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
bin_and_quantile <- function(dat, bin_number, column){
quantiles <- quantile(dat[column], seq(0,1,1/bin_number), na.rm=T)
x_gt_cond <- quantiles[1:(length(quantiles)-1)]
x_ls_cond <- quantiles[2:length(quantiles)]
x_quarts <- paste0("q",c(1:bin_number))
middles <- (x_gt_cond + x_ls_cond)/2
cases <- paste0(column,' >= ', x_gt_cond, ' &', column ,'< ', x_ls_cond, ' ~ "', x_quarts, '"')
cases[length(cases)] <- gsub("<", "<=", cases[length(cases)])
dat <- dat %>% mutate(quantiles = dplyr::case_when(!!!rlang::parse_exprs(cases)))
conversion_table <- tibble::as_tibble(
list(
quantile_name = x_quarts,
quantile_center = as.numeric(middles)
)
)
dat <- dat %>% left_join(conversion_table, by = c("quantiles"="quantile_name"))
dat$quantiles <- factor(dat$quantiles, levels=x_quarts, ordered=T)
return(dat)
}
# Chunk 2: load_data
rhomis_df <- readr::read_csv("./data/prepared-data/rhomis-geo-data.csv")
# Here we create a "geographic copy" of the dataset
rhomis_geo_data <- sf::st_as_sf(x = rhomis_df, wkt = "geometry")
rhomis_geo_data <- rhomis_geo_data[rhomis_geo_data$iso_3!="NER",]
# IPUMS GEO2 level dataset
ipums_df <- readr::read_csv("./data/prepared-data/ipums-all.csv")
ipums_geo <- sf::st_as_sf(x = ipums_df, wkt = "geometry")
ipums_geo <- ipums_geo[ipums_geo$iso_3!="NER",]
# lsms_all <- readr::read_csv("./data/prepared-data/lsms-all.csv")
# There are a lot of variables to examine in the dataset,
# in this file we have organised them into categories
variable_categories <- jsonlite::read_json("./data/variable-categorisation.json")
world_all <- readr::read_csv("./data/prepared-data/world-shapefile.csv")
world_all <- sf::st_as_sf(x = world_all, wkt = "geometry")
# Metadata
pop_data <- readr::read_csv("./data/pop_variables.csv")
raster_data <- readr::read_csv("./data/raster_variables.csv")
modis_land_cover <- readr::read_csv("./data/earth-engine/modis_land_cover/land_cover_per_region_ipums.csv")
# Chunk 3: PPP
#There are many indicators in the RHoMIS dataset, however, we might want to
#compute some further indicators.
#All of the income units come in local currency units. I would like currencies to
#be internationally comparable, so I am going to change them to PPP$ (purchasing
#power parity).
income_columns_lcu <- c(
"crop_income_lcu_per_year",
"livestock_income_lcu_per_year",
"total_income_lcu_per_year",
"off_farm_income_lcu_per_year",
"value_crop_consumed_lcu_per_hh_per_year",
"value_livestock_products_consumed_lcu_per_hh_per_year",
"value_farm_products_consumed_lcu_per_hh_per_year"
)
income_columns_ppp <- gsub("lcu", "ppp", income_columns_lcu)
rhomis_df[income_columns_ppp] <- rhomis_df[income_columns_lcu]/rhomis_df$currency_conversion_lcu_to_ppp
# Population columns came in form of totals
# Convert these into percentages for comparison
# between locations
population_columns_percentage <- paste0(
variable_categories$ipums$population_columns,
"_perc"
)
ipums_df[population_columns_percentage] <- 100*ipums_df[unlist(variable_categories$ipums$population_columns)]/ipums_df$TOTPOP_GEO2A
rhomis_df[population_columns_percentage] <- 100*rhomis_df[unlist(variable_categories$ipums$population_columns)]/rhomis_df$TOTPOP_GEO2A
# There are duplicate GEOID's by country, so need to create country specific IDs
ipums_df$GEOID_country <- paste0(ipums_df$GEOID, "_" ,ipums_df$iso_2)
rhomis_df$GEOID_country <- paste0(rhomis_df$GEOID, "_" ,rhomis_df$iso_2)
# It can be useful, for exploration, to understand the
# different countries by region.
region_table <- tibble::as_tibble(
list(
"iso_2"=c("BF",
"ET",
"GH",
"KE",
"ML",
"NG",
"RW",
"TZ",
"UG"),
"region_afr"=c("west_africa",
"east_africa",
"west_africa",
"east_africa",
"west_africa",
"west_africa",
"central_africa",
"east_africa",
"east_africa"
)
)
)
ipums_df <- ipums_df %>% left_join(region_table, by = "iso_2")
rhomis_df <- rhomis_df %>% left_join(region_table, by = "iso_2")
mapview(rhomis_geo_data[1:100])
breweries
rhomis_geo_data
crs(rhomis_geo_data) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
sf::st_crs(rhomis_geo_data)
sf::st_crs(rhomis_geo_data) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
rhomis_geo_data
breweries
rhomis_geo_data
sf::st_crs(rhomis_geo_data) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
sf::st_crs(ipums_geo) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
mapview(rhomis_geo_data[1:100])
mapview(rhomis_geo_data)
?mapview
map <- mapview(rhomis_geo_data)
map <- mapview(rhomis_geo_data, map = ipums_geo)
map <- mapview(rhomis_geo_data)
map <- mapview(ipums_geo, map = map)
map
map <- mapview(ipums_geo, color="green")
map <- mapview(rhomis_geo_data, map = map, color="black")
map
map <- mapview(ipums_geo, fill="green", color = "blacl")
map <- mapview(rhomis_geo_data, map = map, fill="black")
map <- mapview(ipums_geo, fill="green", color = "black")
?mapview
map <- mapview(ipums_geo, fill="green", col.regions = "black", alpha.regions=0.3)
map <- mapview(ipums_geo, fill="green", col.regions = "green", alpha.regions=0.3)
map <- mapview(ipums_geo, col.regions = "green", alpha.regions=0.3)
map <- mapview(rhomis_geo_data, map = map, fill="black")
map <- mapview(ipums_geo, col.regions = "green", alpha.regions=0.3)
map <- mapview(rhomis_geo_data, map = map, col="black")
map <- mapview(ipums_geo, col.regions = "green", alpha.regions=0.3)
map <- mapview(rhomis_geo_data, map = map)
map
ipums_geo <- sf::st_simplify(ipums_geo)
plot(ipums_geo[1432])
plot(ipums_geo[1432,])
?st_simplify
sf::st_simplify(ipums_geo)
install.packages(s2)
install.packages("s2")
library(s2)
ipums_geo
s2::s2_rebuild() %>%
sf::st_simplify()
ipums_geo$geometry
s2::s2_rebuild() %>%
sf::st_simplify()
ipums_geo$geometry %>%
s2::s2_rebuild() %>%
sf::st_simplify()
ipums_geo$geometry %>%
s2::s2_rebuild()
sf_use_s2(FALSE)
ipums_geo$geometry %>%
# s2::s2_rebuild() %>%
sf::st_simplify()
ipums_geo$geometry <- ipums_geo$geometry %>%
# s2::s2_rebuild() %>%
sf::st_simplify(dTolerance = 0.2)
map <- mapview(ipums_geo, col.regions = "green", alpha.regions=0.3)
map <- mapview(rhomis_geo_data, map = map)
map
ipums_geo <- sf::st_as_sf(x = ipums_df, wkt = "geometry")
ipums_geo <- ipums_geo[ipums_geo$iso_3!="NER",]
sf::st_crs(ipums_geo) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
ipums_geo$geometry <- ipums_geo$geometry %>%
# s2::s2_rebuild() %>%
sf::st_simplify(dTolerance = 0.1)
map <- mapview(ipums_geo, col.regions = "green", alpha.regions=0.3)
map <- mapview(rhomis_geo_data, map = map)
map
map <- mapview(ipums_geo, col.regions = "green", alpha.regions=0.3)
map <- mapview(rhomis_geo_data, map = map, alpha=1, color="black")
map
map <- mapview(rhomis_geo_data, map = map, alpha=1, color="black")
map <- mapview(rhomis_geo_data, alpha=1, color="black")
map <- mapview(ipums_geo,
map = map,
alpha=1,
color="black",
col.regions = "green",
alpha.regions=0.3)
map
map <- mapview(rhomis_geo_data, alpha=1, color="black", burst=T)+
mapview(ipums_geo,
alpha=1,
color="black",
col.regions = "green",
alpha.regions=0.3, burst=T)
# IPUMS GEO2 level dataset
ipums_df <- readr::read_csv("./data/prepared-data/ipums-all.csv")
ipums_geo <- sf::st_as_sf(x = ipums_df, wkt = "geometry")
ipums_geo <- ipums_geo[ipums_geo$iso_3!="NER",]
sf::st_crs(ipums_geo) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
ipums_geo$geometry <- ipums_geo$geometry %>%
# s2::s2_rebuild() %>%
sf::st_simplify(dTolerance = 0.05)
map <- mapview(rhomis_geo_data$geometry, alpha=1, col.regions="black", burst=T)+
mapview(ipums_geo$geometry,
alpha=1,
color="black",
col.regions = "green",
alpha.regions=0.3, burst=T)
map
map <- mapview(rhomis_geo_data$geometry, alpha=1, col.regions="black",color="white" burst=T)+
mapview(ipums_geo$geometry,
alpha=1,
color="black",
col.regions = "green",
alpha.regions=0.3, burst=T)
map
map <- mapview(rhomis_geo_data$geometry, alpha=0.5, col.regions="black",color="white" burst=T)+
mapview(ipums_geo$geometry,
alpha=1,
color="black",
col.regions = "green",
alpha.regions=0.3, burst=T)
map
